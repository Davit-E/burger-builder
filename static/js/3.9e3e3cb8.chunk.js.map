{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","authForm","email","elemType","elemConfig","type","placeholder","value","validation","required","isValid","touched","password","isSignIn","checkValidity","rules","trim","inputChangedHandler","event","inputKey","target","setState","prevState","authHandler","preventDefault","formFilled","formCopy","Object","entries","key","props","onAuth","signSwitchHandler","console","log","authFormArr","push","changed","this","signText","switchText","form","className","classes","SignText","onSubmit","ErrorMessage","error","btnType","clicked","loading","redirect","isAuth","ordering","to","Component","connect","auth","userId","building","burger","dispatch","actionCreators","input","inputElement","inputClasses","Input","validationError","Invalid","ValidationError","join","onChange","options","map","el","displayOptions","label"],"mappings":"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","file":"static/js/3.9e3e3cb8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__220n2\",\"ErrorMessage\":\"Auth_ErrorMessage__12ElP\",\"SignText\":\"Auth_SignText__2KauK\"};","import React, { Component } from 'react';\r\nimport classes from './Auth.module.css';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreators from '../../store/actions/index';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    authForm: {\r\n      email: {\r\n        elemType: 'input',\r\n        elemConfig: {\r\n          type: 'email',\r\n          placeholder: 'Email',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n        },\r\n        isValid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elemType: 'input',\r\n        elemConfig: {\r\n          type: 'password',\r\n          placeholder: 'Password',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n        },\r\n        isValid: false,\r\n        touched: false,\r\n      },\r\n    },\r\n    isSignIn: true,\r\n  };\r\n\r\n  checkValidity = (value, rules) => {\r\n    let isValid = true;\r\n    if (rules.required) {\r\n      isValid = value.trim() !== '' && isValid;\r\n    }\r\n\r\n    // if (rules.minLength) {\r\n    //   isValid = value.replace(/\\s/g, '').length >= rules.minLength && isValid;\r\n    // }\r\n\r\n    // if (rules.maxLength) {\r\n    //   isValid = value.replace(/\\s/g, '').length <= rules.maxLength && isValid;\r\n    // }\r\n\r\n    return isValid;\r\n  };\r\n\r\n  inputChangedHandler = (event, inputKey) => {\r\n    let value = event.target.value;\r\n    this.setState((prevState) => {\r\n      let isValid = this.checkValidity(\r\n        value,\r\n        prevState.authForm[inputKey].validation\r\n      );\r\n      return {\r\n        authForm: {\r\n          ...prevState.authForm,\r\n          [inputKey]: {\r\n            ...prevState.authForm[inputKey],\r\n            value,\r\n            isValid,\r\n            touched: true,\r\n          },\r\n        },\r\n      };\r\n    });\r\n  };\r\n\r\n  authHandler = (event) => {\r\n    event.preventDefault();\r\n    let formFilled = true;\r\n    let formCopy = { ...this.state.authForm };\r\n\r\n    for (const [key, value] of Object.entries(this.state.authForm)) {\r\n      formCopy[key] = { ...this.state.authForm[key], touched: true };\r\n      if (value.validation.required && !value.isValid) {\r\n        formFilled = false;\r\n      }\r\n    }\r\n\r\n    if (formFilled) {\r\n      this.props.onAuth(\r\n        this.state.authForm.email.value,\r\n        this.state.authForm.password.value,\r\n        this.state.isSignIn\r\n      );\r\n    } else {\r\n      this.setState({ authForm: formCopy });\r\n    }\r\n  };\r\n\r\n  signSwitchHandler = () => {\r\n    console.log('Hi');\r\n    this.setState({ isSignIn: !this.state.isSignIn });\r\n  };\r\n\r\n  render() {\r\n    let authFormArr = [];\r\n    for (let [key, value] of Object.entries(this.state.authForm)) {\r\n      authFormArr.push(\r\n        <Input\r\n          key={key}\r\n          {...value}\r\n          changed={(event) => this.inputChangedHandler(event, key)}\r\n        />\r\n      );\r\n    }\r\n    let signText = 'Sign In';\r\n    let switchText = 'Create account';\r\n    if (!this.state.isSignIn) {\r\n      signText = 'Sign Up';\r\n      switchText = 'Sign in instead';\r\n    }\r\n\r\n    let form = (\r\n      <>\r\n        <h1 className={classes.SignText}>{signText}</h1>\r\n        <form onSubmit={this.authHandler}>\r\n          {authFormArr}\r\n          <p className={classes.ErrorMessage}>{this.props.error}</p>\r\n          <Button btnType='Success'>Continue</Button>\r\n        </form>\r\n        <Button btnType='Danger' clicked={this.signSwitchHandler}>\r\n          {switchText}\r\n        </Button>\r\n      </>\r\n    );\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    let redirect = null;\r\n    if (this.props.isAuth && this.props.ordering) {\r\n      redirect = <Redirect to='/checkout' />;\r\n    } else if (this.props.isAuth) {\r\n      redirect = <Redirect to='/burger-builder' />;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.Auth}>\r\n        {form}\r\n        {redirect}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuth: state.auth.userId !== null,\r\n    building: state.burger.building,\r\n    ordering: state.burger.ordering,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignIn) =>\r\n      dispatch(actionCreators.auth(email, password, isSignIn)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  let inputClasses = [classes.Input];\r\n  let validationError = null;\r\n  if (!props.isValid && props.validation.required && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n    validationError = <p className={classes.ValidationError}>Please enter a valid {props.elemConfig.placeholder}</p>\r\n  }\r\n\r\n  if (props.elemType === 'textarea') {\r\n    inputElement = (\r\n      <textarea\r\n        className={inputClasses.join(' ')}\r\n        value={props.value}\r\n        {...props.elemConfig}\r\n        onChange={props.changed}\r\n      />\r\n    );\r\n  } else if (props.elemType === 'select') {\r\n    inputElement = (\r\n      <select\r\n        className={inputClasses.join(' ')}\r\n        value={props.value}\r\n        onChange={props.changed}\r\n      >\r\n        {props.elemConfig.options.map((el) => {\r\n          return (\r\n            <option key={el.value} value={el.value}>\r\n              {el.displayOptions}\r\n            </option>\r\n          );\r\n        })}\r\n      </select>\r\n    );\r\n  } else {\r\n    inputElement = (\r\n      <input\r\n        className={inputClasses.join(' ')}\r\n        value={props.value}\r\n        {...props.elemConfig}\r\n        onChange={props.changed}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {validationError}\r\n      <label>{props.label}</label>\r\n      {inputElement}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__13nT7\",\"Invalid\":\"Input_Invalid__14qdl\",\"ValidationError\":\"Input_ValidationError__3wz4Q\"};"],"sourceRoot":""}