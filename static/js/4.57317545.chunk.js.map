{"version":3,"sources":["containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css"],"names":["Auth","useState","isSignIn","setIsSignIn","isSwitching","setIsSwitching","email","elemType","elemConfig","type","placeholder","value","validation","required","isValid","touched","password","authForm","setAuthForm","dispatch","useDispatch","loading","useSelector","state","auth","error","isAuth","userId","ordering","burger","authFormArr","key","push","changed","event","inputKey","target","prevState","rules","trim","checkValidity","inputChangedHandler","Object","entries","signText","switchText","form","className","classes","SignText","onSubmit","preventDefault","formFilled","formCopy","actionCreators","onAuth","ErrorMessage","btnType","clicked","setTimeout","redirect","to","input","props","inputElement","inputClasses","Input","validationError","Invalid","ValidationError","join","onChange","options","map","el","displayOptions","label","module","exports"],"mappings":"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","file":"static/js/4.57317545.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport classes from './Auth.module.css';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as actionCreators from '../../store/actions/index';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst Auth = () => {\r\n  const [isSignIn, setIsSignIn] = useState(true);\r\n  const [isSwitching, setIsSwitching] = useState(false);\r\n  const [authForm, setAuthForm] = useState({\r\n    email: {\r\n      elemType: 'input',\r\n      elemConfig: {\r\n        type: 'email',\r\n        placeholder: 'Email',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n      },\r\n      isValid: false,\r\n      touched: false,\r\n    },\r\n    password: {\r\n      elemType: 'input',\r\n      elemConfig: {\r\n        type: 'password',\r\n        placeholder: 'Password',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n      },\r\n      isValid: false,\r\n      touched: false,\r\n    },\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n  const onAuth = (email, password, isSignIn) =>\r\n    dispatch(actionCreators.auth(email, password, isSignIn));\r\n\r\n  const loading = useSelector((state) => state.auth.loading);\r\n  const error = useSelector((state) => state.auth.error);\r\n  const isAuth = useSelector((state) => state.auth.userId !== null);\r\n  const ordering = useSelector((state) => state.burger.ordering);\r\n\r\n  const checkValidity = (value, rules) => {\r\n    let isValid = true;\r\n    if (rules.required) {\r\n      isValid = value.trim() !== '' && isValid;\r\n    }\r\n    return isValid;\r\n  };\r\n\r\n  const inputChangedHandler = (event, inputKey) => {\r\n    let value = event.target.value;\r\n    setAuthForm((prevState) => {\r\n      let isValid = checkValidity(value, prevState[inputKey].validation);\r\n      return {\r\n        ...prevState,\r\n        [inputKey]: {\r\n          ...prevState[inputKey],\r\n          value,\r\n          isValid,\r\n          touched: true,\r\n        },\r\n      };\r\n    });\r\n  };\r\n\r\n  const authHandler = (event) => {\r\n    event.preventDefault();\r\n    let formFilled = true;\r\n    let formCopy = { ...authForm };\r\n\r\n    for (const [key, value] of Object.entries(authForm)) {\r\n      formCopy[key] = { ...authForm[key], touched: true };\r\n      if (value.validation.required && !value.isValid) {\r\n        formFilled = false;\r\n      }\r\n    }\r\n\r\n    if (formFilled) {\r\n      onAuth(authForm.email.value, authForm.password.value, isSignIn);\r\n    } else {\r\n      setAuthForm(formCopy);\r\n    }\r\n  };\r\n\r\n  const signSwitchHandler = () => {\r\n    setIsSwitching((prevState) => !prevState);\r\n    setTimeout(() => {\r\n      setIsSignIn((prevState) => !prevState);\r\n      setIsSwitching((prevState) => !prevState);\r\n    }, 500);\r\n  };\r\n\r\n  let authFormArr = [];\r\n  for (let [key, value] of Object.entries(authForm)) {\r\n    authFormArr.push(\r\n      <Input\r\n        key={key}\r\n        {...value}\r\n        changed={(event) => inputChangedHandler(event, key)}\r\n      />\r\n    );\r\n  }\r\n  let signText = 'Sign In';\r\n  let switchText = 'Create account';\r\n  if (!isSignIn) {\r\n    signText = 'Sign Up';\r\n    switchText = 'Sign in instead';\r\n  }\r\n\r\n  let form = (\r\n    <>\r\n      <h1 className={classes.SignText}>{signText}</h1>\r\n      <form onSubmit={authHandler}>\r\n        {authFormArr}\r\n        <p className={classes.ErrorMessage}>{error}</p>\r\n        <Button btnType='Success'>Continue</Button>\r\n      </form>\r\n      <Button btnType='Danger' clicked={signSwitchHandler}>\r\n        {switchText}\r\n      </Button>\r\n    </>\r\n  );\r\n\r\n  if (loading || isSwitching) {\r\n    form = <Spinner />;\r\n  }\r\n\r\n  let redirect = null;\r\n  if (isAuth && ordering) {\r\n    redirect = <Redirect to='/checkout' />;\r\n  } else if (isAuth) {\r\n    redirect = <Redirect to='/burger-builder' />;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Auth}>\r\n      {form}\r\n      {redirect}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  let inputClasses = [classes.Input];\r\n  let validationError = null;\r\n  if (!props.isValid && props.validation.required && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n    validationError = <p className={classes.ValidationError}>Please enter a valid {props.elemConfig.placeholder}</p>\r\n  }\r\n\r\n  if (props.elemType === 'textarea') {\r\n    inputElement = (\r\n      <textarea\r\n        className={inputClasses.join(' ')}\r\n        value={props.value}\r\n        {...props.elemConfig}\r\n        onChange={props.changed}\r\n      />\r\n    );\r\n  } else if (props.elemType === 'select') {\r\n    inputElement = (\r\n      <select\r\n        className={inputClasses.join(' ')}\r\n        value={props.value}\r\n        onChange={props.changed}\r\n      >\r\n        {props.elemConfig.options.map((el) => {\r\n          return (\r\n            <option key={el.value} value={el.value}>\r\n              {el.displayOptions}\r\n            </option>\r\n          );\r\n        })}\r\n      </select>\r\n    );\r\n  } else {\r\n    inputElement = (\r\n      <input\r\n        className={inputClasses.join(' ')}\r\n        value={props.value}\r\n        {...props.elemConfig}\r\n        onChange={props.changed}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {validationError}\r\n      <label>{props.label}</label>\r\n      {inputElement}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__13nT7\",\"Invalid\":\"Input_Invalid__14qdl\",\"ValidationError\":\"Input_ValidationError__3wz4Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__220n2\",\"ErrorMessage\":\"Auth_ErrorMessage__12ElP\",\"SignText\":\"Auth_SignText__2KauK\"};"],"sourceRoot":""}