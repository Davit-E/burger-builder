{"version":3,"sources":["containers/Checkout/ContactData/ContactData.module.css","containers/Checkout/ContactData/ContactData.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","ContactData","state","orderForm","name","elemType","elemConfig","type","placeholder","value","validation","required","isValid","touched","email","street","zipCode","minLength","maxLength","deliveryMetod","options","displayOptions","scrollToBottom","el","scrollIntoView","behavior","checkValidity","rules","trim","replace","length","orderHandler","event","preventDefault","formFilled","formCopy","Object","entries","key","order","ingredients","props","price","toFixed","userId","orderData","onSendOrder","onSendOrderSuccessful","token","setState","inputChangedHandler","inputKey","target","prevState","this","orderFormArr","push","changed","form","onSubmit","btnType","loading","redirect","orderSent","to","id","className","classes","ref","Component","connect","burger","totalPrice","auth","ordering","dispatch","actionCreators","withErrorHandler","axios","input","inputElement","inputClasses","Input","validationError","Invalid","ValidationError","join","onChange","map","label"],"mappings":"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","file":"static/js/4.6052c93d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__31rn2\"};","import React, { Component } from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreators from '../../../store/actions/index';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elemType: 'input',\r\n        elemConfig: {\r\n          type: 'text',\r\n          placeholder: 'Name',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n        },\r\n        isValid: false,\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elemType: 'input',\r\n        elemConfig: {\r\n          type: 'email',\r\n          placeholder: 'Email',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n        },\r\n        isValid: false,\r\n        touched: false,\r\n      },\r\n      street: {\r\n        elemType: 'input',\r\n        elemConfig: {\r\n          type: 'text',\r\n          placeholder: 'Street',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n        },\r\n        isValid: false,\r\n        touched: false,\r\n      },\r\n      zipCode: {\r\n        elemType: 'input',\r\n        elemConfig: {\r\n          type: 'text',\r\n          placeholder: 'ZIP Code',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5,\r\n        },\r\n        isValid: false,\r\n        touched: false,\r\n      },\r\n      deliveryMetod: {\r\n        elemType: 'select',\r\n        elemConfig: {\r\n          options: [\r\n            {\r\n              value: 'fastest',\r\n              displayOptions: 'Fastest',\r\n            },\r\n            {\r\n              value: 'cheapest',\r\n              displayOptions: 'Cheapest',\r\n            },\r\n          ],\r\n        },\r\n        value: 'fastest',\r\n        validation: {\r\n          required: false,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  scrollToBottom = () => {\r\n    this.el.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  checkValidity = (value, rules) => {\r\n    let isValid = true;\r\n    if (rules.required) {\r\n      isValid = value.trim() !== '' && isValid;\r\n    }\r\n\r\n    if (rules.minLength) {\r\n      isValid = value.replace(/\\s/g, '').length >= rules.minLength && isValid;\r\n    }\r\n\r\n    if (rules.maxLength) {\r\n      isValid = value.replace(/\\s/g, '').length <= rules.maxLength && isValid;\r\n    }\r\n\r\n    return isValid;\r\n  };\r\n\r\n  orderHandler = (event) => {\r\n    event.preventDefault();\r\n    let formFilled = true;\r\n    let formCopy = { ...this.state.orderForm };\r\n\r\n    for (const [key, value] of Object.entries(this.state.orderForm)) {\r\n      formCopy[key] = { ...this.state.orderForm[key], touched: true };\r\n      if (value.validation.required && !value.isValid) {\r\n        formFilled = false;\r\n      }\r\n    }\r\n\r\n    if (formFilled) {\r\n      let orderForm = {};\r\n      for (const key in this.state.orderForm) {\r\n        orderForm[key] = this.state.orderForm[key].value;\r\n      }\r\n\r\n      const order = {\r\n        ingredients: this.props.ingredients,\r\n        price: this.props.price.toFixed(2),\r\n        userId: this.props.userId,\r\n        orderData: orderForm,\r\n      };\r\n\r\n      this.props.onSendOrder();\r\n      this.props.onSendOrderSuccessful(order, this.props.token);\r\n    } else {\r\n      this.setState({ orderForm: formCopy });\r\n    }\r\n  };\r\n\r\n  inputChangedHandler = (event, inputKey) => {\r\n    let value = event.target.value;\r\n    this.setState((prevState) => {\r\n      let isValid = this.checkValidity(\r\n        value,\r\n        prevState.orderForm[inputKey].validation\r\n      );\r\n      return {\r\n        orderForm: {\r\n          ...prevState.orderForm,\r\n          [inputKey]: {\r\n            ...prevState.orderForm[inputKey],\r\n            value,\r\n            isValid,\r\n            touched: true,\r\n          },\r\n        },\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let orderFormArr = [];\r\n    for (let [key, value] of Object.entries(this.state.orderForm)) {\r\n      orderFormArr.push(\r\n        <Input\r\n          key={key}\r\n          {...value}\r\n          changed={(event) => this.inputChangedHandler(event, key)}\r\n        />\r\n      );\r\n    }\r\n\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        {orderFormArr}\r\n        <Button btnType='Success'>Order</Button>\r\n      </form>\r\n    );\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    let redirect = null;\r\n\r\n    if (this.props.orderSent) {\r\n      redirect = <Redirect to='/' />;\r\n    }\r\n\r\n    return (\r\n      <div id='ContactData' className={classes.ContactData}>\r\n        <h4>Enter your contact info:</h4>\r\n        {form}\r\n        <div\r\n          ref={(el) => {\r\n            this.el = el;\r\n          }}\r\n        />\r\n        {redirect}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ingredients: state.burger.ingredients,\r\n    price: state.burger.totalPrice,\r\n    loading: state.order.loading,\r\n    orderSent: state.order.orderSent,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n    ordering: state.burger.ordering,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSendOrder: () => dispatch(actionCreators.sendOrderStart()),\r\n    onSendOrderSuccessful: (order, token) =>\r\n      dispatch(actionCreators.sendOrderSuccessful(order, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  let inputClasses = [classes.Input];\r\n  let validationError = null;\r\n  if (!props.isValid && props.validation.required && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n    validationError = <p className={classes.ValidationError}>Please enter a valid {props.elemConfig.placeholder}</p>\r\n  }\r\n\r\n  if (props.elemType === 'textarea') {\r\n    inputElement = (\r\n      <textarea\r\n        className={inputClasses.join(' ')}\r\n        value={props.value}\r\n        {...props.elemConfig}\r\n        onChange={props.changed}\r\n      />\r\n    );\r\n  } else if (props.elemType === 'select') {\r\n    inputElement = (\r\n      <select\r\n        className={inputClasses.join(' ')}\r\n        value={props.value}\r\n        onChange={props.changed}\r\n      >\r\n        {props.elemConfig.options.map((el) => {\r\n          return (\r\n            <option key={el.value} value={el.value}>\r\n              {el.displayOptions}\r\n            </option>\r\n          );\r\n        })}\r\n      </select>\r\n    );\r\n  } else {\r\n    inputElement = (\r\n      <input\r\n        className={inputClasses.join(' ')}\r\n        value={props.value}\r\n        {...props.elemConfig}\r\n        onChange={props.changed}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {validationError}\r\n      <label>{props.label}</label>\r\n      {inputElement}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__13nT7\",\"Invalid\":\"Input_Invalid__14qdl\",\"ValidationError\":\"Input_ValidationError__3wz4Q\"};"],"sourceRoot":""}